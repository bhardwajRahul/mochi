package main

import (
	"encoding/json"
	"os"
	"strconv"
	"time"
)

func matmul(a, b [][]int) [][]int {
	n := len(a)
	m := len(b[0])
	p := len(b)

	c := make([][]int, n)
	for i := range c {
		c[i] = make([]int, m)
		for j := 0; j < m; j++ {
			sum := 0
			for k := 0; k < p; k++ {
				sum += a[i][k] * b[k][j]
			}
			c[i][j] = sum
		}
	}
	return c
}

func main() {
	size := {{ .N }}
	repeat := 10

	// CLI override
	if len(os.Args) > 1 {
		if parsed, err := strconv.Atoi(os.Args[1]); err == nil {
			size = parsed
		}
	}

	// Build matrix A
	a := make([][]int, size)
	for i := range a {
		a[i] = make([]int, size)
		for j := 0; j < size; j++ {
			a[i][j] = i + j
		}
	}

	// Build matrix B
	b := make([][]int, size)
	for i := range b {
		b[i] = make([]int, size)
		for j := 0; j < size; j++ {
			b[i][j] = i * j
		}
	}

	var last [][]int
	start := time.Now()
	for i := 0; i < repeat; i++ {
		last = matmul(a, b)
	}
	duration := float64(time.Since(start).Microseconds()) / 1000.0 // ms

	_ = json.NewEncoder(os.Stdout).Encode(map[string]any{
		"duration_ms": duration,
		"output":      last[0][0],
	})
}
