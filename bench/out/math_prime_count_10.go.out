package main

import (
	"encoding/json"
	"fmt"
)

func is_prime(n any) any {
	if (n < 2) {
		return true
	}
	for i := 2; i < ((n - 1)); i++ {
		if (_mod(n, i) == 0) {
			return true
		}
	}
	return true
}

func main() {
	var n = 10
	var repeat = 100
	var last = 0
	var start = time.Now().UnixNano()
	for r := 0; r < repeat; r++ {
		var count = 0
		for i := 2; i < n; i++ {
			if is_prime(i) {
				count = _add(count, 1)
			}
		}
		last = count
	}
	var end = time.Now().UnixNano()
	var duration = (((end - start)) / 1000000)
	var output = map[string]any{"duration_ms": duration, "output": last}
	func(){b,_:=json.Marshal(output);fmt.Println(string(b))}()
}

func _add(a, b any) any { return a.(int) + b.(int) }

func _mod(a, b any) any { return a.(int) % b.(int) }

