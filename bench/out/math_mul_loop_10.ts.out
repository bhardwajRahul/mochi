// Generated by Mochi TypeScript compiler

function mul(n) {
	let result = 1
	for (let i = 1; i < n; i++) {
		result = (result * i)
	}
	return result
}

function main(): void {
	let n = 10
	let repeat = 1000
	let last = 0
	let start = performance.now() * 1000000
	for (let i = 0; i < repeat; i++) {
		last = mul(n)
	}
	let duration = (((performance.now() * 1000000 - start)) / 1000000)
	let output = {["duration_ms"]: duration, ["output"]: last}
	console.log(JSON.stringify(output))
}
main()


function _index(v: any, k: any): any {
  if (Array.isArray(v) || typeof v === "string") {
    const l = (v as any).length;
    if (typeof k === "number" && k < 0) k = l + k;
  }
  return (v as any)[k];
}

function _slice(v: any, start: number, end: number): any {
  if (typeof v === "string" || Array.isArray(v)) {
    const l = (v as any).length;
    if (start < 0) start = l + start;
    if (end < 0) end = l + end;
    return (v as any).slice(start, end);
  }
  throw new Error("invalid slice target");
}

function _iter(v: any): any[] {
  if (Array.isArray(v)) return v;
  if (typeof v === "string") return Array.from(v);
  if (v && typeof v === "object") return Object.keys(v);
  return [];
}

function _len(v: any): number {
  if (Array.isArray(v) || typeof v === "string") return (v as any).length;
  if (v && typeof v === "object") return Object.keys(v).length;
  return 0;
}

