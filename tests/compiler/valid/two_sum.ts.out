// Generated by Mochi TypeScript compiler

function twoSum(nums, target) {
	let n = _len(nums)
	for (let i = 0; i < n; i++) {
		for (let j = (i + 1); j < n; j++) {
			if (((_index(nums, i) + _index(nums, j)) == target)) {
				return [i, j]
			}
		}
	}
	return [(-1), (-1)]
}

async function main(): Promise<void> {
	let result = twoSum([2, 7, 11, 15], 9)
	console.log(_index(result, 0))
	console.log(_index(result, 1))
}
await main()
await _waitAll()

function _index(v: any, k: any): any {
  if (Array.isArray(v) || typeof v === "string") {
    const l = (v as any).length;
    if (typeof k === "number" && k < 0) k = l + k;
  }
  return (v as any)[k];
}

function _len(v: any): number {
  if (Array.isArray(v) || typeof v === "string") return (v as any).length;
  if (v && typeof v === "object") return Object.keys(v).length;
  return 0;
}

const _pending: Promise<any>[] = [];
async function _waitAll(): Promise<void> {
  await Promise.all(_pending);
}
